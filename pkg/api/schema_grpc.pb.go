// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: schema.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SnapshotMetadata_GetMetadataAllocated_FullMethodName = "/snapshotmetadata.SnapshotMetadata/GetMetadataAllocated"
	SnapshotMetadata_GetMetadataDelta_FullMethodName     = "/snapshotmetadata.SnapshotMetadata/GetMetadataDelta"
)

// SnapshotMetadataClient is the client API for SnapshotMetadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Kubernetes SnapshotMetadata API is very similar to the CSI
// SnapshotMetadata Service API. The only structural differences between the
// two specifications are in some message properties.
// Refs: https://github.com/kubernetes/enhancements/blob/ffb78131af83279b8852ae742ca60ff81498eecd/keps/sig-storage/3314-csi-changed-block-tracking/README.md#the-csi-snapshotmetadata-service-api
// https://github.com/container-storage-interface/spec/pull/551
type SnapshotMetadataClient interface {
	GetMetadataAllocated(ctx context.Context, in *GetMetadataAllocatedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMetadataAllocatedResponse], error)
	GetMetadataDelta(ctx context.Context, in *GetMetadataDeltaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMetadataDeltaResponse], error)
}

type snapshotMetadataClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotMetadataClient(cc grpc.ClientConnInterface) SnapshotMetadataClient {
	return &snapshotMetadataClient{cc}
}

func (c *snapshotMetadataClient) GetMetadataAllocated(ctx context.Context, in *GetMetadataAllocatedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMetadataAllocatedResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SnapshotMetadata_ServiceDesc.Streams[0], SnapshotMetadata_GetMetadataAllocated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMetadataAllocatedRequest, GetMetadataAllocatedResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnapshotMetadata_GetMetadataAllocatedClient = grpc.ServerStreamingClient[GetMetadataAllocatedResponse]

func (c *snapshotMetadataClient) GetMetadataDelta(ctx context.Context, in *GetMetadataDeltaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMetadataDeltaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SnapshotMetadata_ServiceDesc.Streams[1], SnapshotMetadata_GetMetadataDelta_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMetadataDeltaRequest, GetMetadataDeltaResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnapshotMetadata_GetMetadataDeltaClient = grpc.ServerStreamingClient[GetMetadataDeltaResponse]

// SnapshotMetadataServer is the server API for SnapshotMetadata service.
// All implementations must embed UnimplementedSnapshotMetadataServer
// for forward compatibility.
//
// The Kubernetes SnapshotMetadata API is very similar to the CSI
// SnapshotMetadata Service API. The only structural differences between the
// two specifications are in some message properties.
// Refs: https://github.com/kubernetes/enhancements/blob/ffb78131af83279b8852ae742ca60ff81498eecd/keps/sig-storage/3314-csi-changed-block-tracking/README.md#the-csi-snapshotmetadata-service-api
// https://github.com/container-storage-interface/spec/pull/551
type SnapshotMetadataServer interface {
	GetMetadataAllocated(*GetMetadataAllocatedRequest, grpc.ServerStreamingServer[GetMetadataAllocatedResponse]) error
	GetMetadataDelta(*GetMetadataDeltaRequest, grpc.ServerStreamingServer[GetMetadataDeltaResponse]) error
	mustEmbedUnimplementedSnapshotMetadataServer()
}

// UnimplementedSnapshotMetadataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnapshotMetadataServer struct{}

func (UnimplementedSnapshotMetadataServer) GetMetadataAllocated(*GetMetadataAllocatedRequest, grpc.ServerStreamingServer[GetMetadataAllocatedResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetMetadataAllocated not implemented")
}
func (UnimplementedSnapshotMetadataServer) GetMetadataDelta(*GetMetadataDeltaRequest, grpc.ServerStreamingServer[GetMetadataDeltaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetMetadataDelta not implemented")
}
func (UnimplementedSnapshotMetadataServer) mustEmbedUnimplementedSnapshotMetadataServer() {}
func (UnimplementedSnapshotMetadataServer) testEmbeddedByValue()                          {}

// UnsafeSnapshotMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotMetadataServer will
// result in compilation errors.
type UnsafeSnapshotMetadataServer interface {
	mustEmbedUnimplementedSnapshotMetadataServer()
}

func RegisterSnapshotMetadataServer(s grpc.ServiceRegistrar, srv SnapshotMetadataServer) {
	// If the following call pancis, it indicates UnimplementedSnapshotMetadataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnapshotMetadata_ServiceDesc, srv)
}

func _SnapshotMetadata_GetMetadataAllocated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMetadataAllocatedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotMetadataServer).GetMetadataAllocated(m, &grpc.GenericServerStream[GetMetadataAllocatedRequest, GetMetadataAllocatedResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnapshotMetadata_GetMetadataAllocatedServer = grpc.ServerStreamingServer[GetMetadataAllocatedResponse]

func _SnapshotMetadata_GetMetadataDelta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMetadataDeltaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotMetadataServer).GetMetadataDelta(m, &grpc.GenericServerStream[GetMetadataDeltaRequest, GetMetadataDeltaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnapshotMetadata_GetMetadataDeltaServer = grpc.ServerStreamingServer[GetMetadataDeltaResponse]

// SnapshotMetadata_ServiceDesc is the grpc.ServiceDesc for SnapshotMetadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotMetadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snapshotmetadata.SnapshotMetadata",
	HandlerType: (*SnapshotMetadataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMetadataAllocated",
			Handler:       _SnapshotMetadata_GetMetadataAllocated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMetadataDelta",
			Handler:       _SnapshotMetadata_GetMetadataDelta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema.proto",
}
